name: Update Profile README (Recent Projects & Top Languages)

on:
  schedule:
    - cron: "0 */3 * * *"   # alle 3 Stunden
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/update-readme.yml"

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    env:
      BRANCH: ${{ github.ref_name }}
    steps:
      - name: Checkout (volle Historie für rebase)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build dynamic sections
        id: build
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const username = context.repo.owner;

            // Repos holen (öffentlich)
            const { data: repos } = await github.rest.repos.listForUser({
              username,
              per_page: 100,
              sort: "updated"
            });

            // Filter: keine Forks/Privat/Profil-Repo
            const filtered = repos.filter(r =>
              !r.fork && !r.private && r.name.toLowerCase() !== username.toLowerCase()
            );

            // robuste Aktivitätssortierung
            const lastActivity = r => new Date(r.pushed_at || r.updated_at || r.created_at || 0).getTime();
            const newest = [...filtered].sort((a,b) => lastActivity(b) - lastActivity(a)).slice(0, 5);

            const projects = newest.length
              ? newest.map(r => {
                  const desc = r.description ? ` — ${r.description.replace(/\r?\n/g," ").trim()}` : "";
                  const star = r.stargazers_count ? ` ★${r.stargazers_count}` : "";
                  const d = new Date(r.pushed_at || r.updated_at || r.created_at);
                  const ymd = isNaN(d) ? "" : d.toISOString().slice(0,10);
                  return `- [${r.name}](${r.html_url})${desc}${ymd ? ` _(updated ${ymd})_` : ""}${star}`;
                }).join("\n")
              : "*Noch keine öffentlichen Repos*";

            // Top-Sprachen
            const counts = {};
            filtered.forEach(r => { if (r.language) counts[r.language] = (counts[r.language]||0)+1; });
            const palette = ["1f6feb","db61a2","7ee787","ffa657","d2a8ff","79c0ff"];
            const langs = Object.entries(counts)
              .sort((a,b)=>b[1]-a[1])
              .slice(0,6)
              .map(([lang, n], i) => {
                const color = palette[i % palette.length];
                const label = encodeURIComponent(lang);
                const msg = encodeURIComponent(`${n} repo${n>1?'s':''}`);
                return `![${lang}](https://img.shields.io/badge/${label}-${msg}-${color})`;
              })
              .join(" ") || "_Noch keine Sprache erkannt_";

            core.setOutput("projects", projects);
            core.setOutput("langs", langs);

      - name: Update README (safe replace)
        uses: actions/github-script@v7
        env:
          PROJECTS: ${{ steps.build.outputs.projects }}
          LANGS: ${{ steps.build.outputs.langs }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'README.md';
            const projStart = '<!-- RECENT_PROJECTS_START -->';
            const projEnd   = '<!-- RECENT_PROJECTS_END -->';
            const langStart = '<!-- TOP_LANGS_START -->';
            const langEnd   = '<!-- TOP_LANGS_END -->';

            function replaceBlock(src, start, end, replacement) {
              const s = src.indexOf(start);
              const e = src.indexOf(end);
              if (s === -1 || e === -1 || e < s) {
                core.setFailed(`Marker nicht gefunden: ${start} / ${end}`);
                return src;
              }
              const before = src.slice(0, s + start.length);
              const after  = src.slice(e);
              return `${before}\n${replacement}\n${after}`;
            }

            if (!fs.existsSync(path)) {
              core.setFailed('README.md nicht gefunden');
            } else {
              let md = fs.readFileSync(path, 'utf8');
              md = replaceBlock(md, projStart, projEnd, process.env.PROJECTS || '*keine Daten*');
              md = replaceBlock(md, langStart, langEnd, process.env.LANGS || '*keine Daten*');
              fs.writeFileSync(path, md);
            }

      - name: Commit & Push (mit rebase)
        run: |
          if git diff --quiet; then
            echo "No changes."
            exit 0
          fi

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Sicherstellen, dass BRANCH existiert und Tracking gesetzt ist
          git branch --show-current || git checkout -B "$BRANCH"

          # Rebase auf Remote-Stand (verhindert non-fast-forward)
          git fetch origin "$BRANCH"
          git pull --rebase origin "$BRANCH"

          git add README.md
          git commit -m "chore: auto-update README (projects & languages)"
          git push origin "$BRANCH"
