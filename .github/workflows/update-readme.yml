name: Update README with latest projects

on:
  schedule:
    - cron: "0 6 * * *"   # täglich 06:00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build recent projects list
        id: build
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const username = 'laurinhuebner';

            // Repos holen (öffentlich, neueste zuerst)
            const { data: repos } = await github.rest.repos.listForUser({
              username,
              per_page: 100,
              sort: 'updated'
            });

            // filtern: keine Forks, keine privaten, Profil-Repo optional zulassen
            const filtered = repos.filter(r => !r.fork && !r.private);

            // Top 5 formatieren
            const list = filtered.slice(0, 5).map(r => {
              const desc = r.description ? r.description.replace(/\r?\n/g, ' ').trim() : 'Keine Beschreibung';
              return `- [**${r.name}**](${r.html_url})  \n  *${desc}*`;
            }).join("\n");

            core.setOutput('projects', list || '*Noch keine öffentlichen Repos*');

      - name: Update README section (safe replace)
        uses: actions/github-script@v7
        env:
          PROJECTS: ${{ steps.build.outputs.projects }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'README.md';
            const start = '<!-- RECENT_PROJECTS_START -->';
            const end   = '<!-- RECENT_PROJECTS_END -->';

            if (!fs.existsSync(path)) {
              core.setFailed('README.md nicht gefunden');
              return;
            }

            let md = fs.readFileSync(path, 'utf8');

            const sIdx = md.indexOf(start);
            const eIdx = md.indexOf(end);
            if (sIdx === -1 || eIdx === -1 || eIdx < sIdx) {
              core.setFailed(`Marker nicht gefunden: ${start} / ${end}`);
              return;
            }

            const before = md.slice(0, sIdx + start.length);
            const after  = md.slice(eIdx);
            const replacement = `\n${process.env.PROJECTS}\n`;
            const updated = before + replacement + after;

            if (updated !== md) {
              fs.writeFileSync(path, updated);
              core.info('README.md aktualisiert');
            } else {
              core.info('Keine Änderungen nötig');
            }

      - name: Commit & Push
        run: |
          if git diff --quiet; then
            echo "No changes."
          else
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add README.md
            git commit -m "chore: update recent projects (daily)"
            git push
          fi
